{"pageProps":{"post":{"title":"JavaScript","slug":"JavaScript","content":"<h1>Overview of JavaScript</h1>\n<ul>\n<li>Dynamic programming languages\n<ul>\n<li>Not pre-compiled</li>\n<li>Code evaluated and executed at runtime</li>\n<li>Code can change at runtime (variable types can change)</li>\n</ul>\n</li>\n<li>Weakly types programming languages\n<ul>\n<li>Data types are assumed automatically</li>\n<li>Strong types you have to define the types</li>\n</ul>\n</li>\n<li>Compiled at runtime</li>\n<li>JS was create to make webpages more dynamic</li>\n<li>JS is executed via JS engine\n<ul>\n<li>V8 (Chrome)</li>\n<li>SpiderMonkey (Firefox)</li>\n<li>the JS engine\n<ol>\n<li>Parse Code</li>\n<li>Compile to Machine code</li>\n<li>execute Machine code</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>All on an Single Thread on your operating system</li>\n<li>JS runs on a Host Environments\n<ul>\n<li>Browserside\n<ul>\n<li>can't acces local file system</li>\n<li>Runs in a sandbox</li>\n</ul>\n</li>\n<li>Serverside\n<ul>\n<li>Extracted the Chrome's V8 (JS Engine)</li>\n<li>You can run it on any machine</li>\n<li>Called Node.js</li>\n<li>You can run on the server</li>\n<li>You can run on any computer (Mac/Linux/Windows)</li>\n<li>Can't manipulate the DOM</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Brief History</h1>\n<ul>\n<li>1995 Netscape release \"LiveScript\", then renamed to JavaScript</li>\n<li>1996 Microsoft release it's own version for IE</li>\n<li>1996 ECMA to start standardization (European Computer Manufacturers Association)</li>\n<li>In 2015 JS had a huge upgrade and we now use transpiling to convert to the older JS so that it can be used in older browsers</li>\n<li>6th Edition – ECMAScript 2015</li>\n<li>7th Edition – ECMAScript 2016</li>\n<li>8th Edition – ECMAScript 2017</li>\n<li>9th Edition – ECMAScript 2018</li>\n<li>10th Edition – ECMAScript 2019</li>\n<li>11th Edition – ECMAScript 2020</li>\n<li>Each browser comes with its own JS engine that also defines wich features are actually supported</li>\n<li><a href=\"https://caniuse.com/\">caniuse</a> is a great resource to see if a feature is supported or not</li>\n<li>ECMA-Script is in active development</li>\n</ul>\n<h1>Topics</h1>\n<ul>\n<li>var, let, Const</li>\n<li>Prototype</li>\n<li>Arrow Functions</li>\n<li>Primitive vs Reference types</li>\n<li>Array &#x26; Array methods</li>\n<li>Object &#x26; Object Method</li>\n<li>Aync &#x26; Promises</li>\n<li>Destructuring</li>\n<li>Template literals</li>\n<li>How the web works</li>\n<li>npm scripts &#x26; package.json</li>\n<li>husky &#x26; nvm versions</li>\n<li>sessions, cookies, &#x26; jwt</li>\n<li>OAuth</li>\n<li>Security\n<ul>\n<li>CSRF attack</li>\n<li>SQL injection</li>\n<li>CORS</li>\n</ul>\n</li>\n<li>Testing\n<ul>\n<li>mocks</li>\n<li>stubs</li>\n<li>spies</li>\n</ul>\n</li>\n<li>Closures</li>\n<li>Hoisting</li>\n<li>Immutability</li>\n<li>Data types</li>\n<li>DOM</li>\n<li>Global &#x26; Local Scope</li>\n<li>Operators</li>\n<li>Undefined, null, &#x26; NaN</li>\n<li>logical operations</li>\n<li>Try/Catch block</li>\n<li>How to throw errors</li>\n<li>Error handling</li>\n<li>strict mode</li>\n<li>parameter vs arguments</li>\n<li>Functions vs Methods</li>\n<li>anonymous functions</li>\n<li>\"this\"</li>\n<li>bind</li>\n<li>Class</li>\n<li>Class inheritance</li>\n<li>recursion</li>\n<li>closures</li>\n<li>pure function</li>\n<li>side effects</li>\n<li>traverse the DOM</li>\n<li>sets</li>\n<li>symbols</li>\n<li>spread operator</li>\n<li>object.asign</li>\n</ul>\n<h1>Loop over a number of times</h1>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> opt <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> num<span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [{\"value\":0,\"label\":0},{\"value\":1,\"label\":1},{\"value\":2,\"label\":2},{\"value\":3,\"label\":3}]</span>\n</code></pre></div>\n<h1>Shorthand of if</h1>\n<ul>\n<li>\n<p><a href=\"https://stackoverflow.com/questions/39488458/javascript-one-line-if-only-state-true\">stackoverflow</a></p>\n</li>\n<li>\n<p>In default 'if' one line statement are two block, for true, and false:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">variable <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> block <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> block<span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n<li>\n<p>How declare 'if' with one block? I expect something like this: <code>variable ? true-block;</code></p>\n</li>\n<li>\n<p>You can do:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">variable &#x26;amp;&#x26;amp; js-block</code></pre></div>\n</li>\n<li>\n<p>For example:</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> variable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> variable <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n</li>\n</ul>\n","ogImage":{"url":"/assets/covers/js.jpg"},"coverImage":"/assets/covers/js.jpg"}},"__N_SSG":true}