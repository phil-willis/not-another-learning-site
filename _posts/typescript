---
title: 'TypeScript'
excerpt: ''
coverImage: '/assets/blog/hello-world/cover.jpg'
ogImage:
  url: '/assets/blog/hello-world/cover.jpg'
---


# Non-Browser TS App
- Init a npm package and install TS
  ```shell
  $ npm init -y
  $ npm i --save-dev typescript
  ```
- Create a tsconfig file
  ```json
  {
    "compilerOptions": {
      "target": "es5",
      "lib": ["dom", "dom.iterable", "esnext"],
      "allowJs": true,
      "moduleResolution": "node",
      "outDir": "dist",
      "removeComments": true,
      "strict": true,
      "strictPropertyInitialization": false,
      "esModuleInterop": true,
      "resolveJsonModule": true,
      "emitDecoratorMetadata": true,
      "experimentalDecorators": true,
      "module": "commonjs",
      "declaration": true,
      "sourceMap": true,
      "rootDir": "./src",
    },
    "include": ["**/*.ts"],
    "exclude": ["node_modules"]
  }
  ```
- Watch for changes
  - Nodemon watches for changes and `ts-node` executes your TS code
    ```shell
    $ npm i -D nodemon ts-node
    ```
  - Create a `nodemon.json` file
    ```json
    {
      "watch": "**/*",
      "ext": "ts, json",
      "exec": "ts-node src/app.ts"
    }
    ```
  - Update your `package.json` with a start script
    ```json
    "scripts": {
      "start": "nodemon",
      "build": "tsc"
    },
    ```
# Browser App (TS + Webpack)
- Allow for browser apps
- Update the `tsconfig.json`
  ```json
  {
    "compilerOptions": {
      "outDir": "./dist/",
      "noImplicitAny": true,
      "module": "es6",
      "target": "es5",
      "allowJs": false,
      "sourceMap": true
    },
    "include": ["**/*.ts"],
    "exclude": ["node_modules"]
  }
  ```
- Install webpack
  ```shell
  $ npm i -D clean-webpack-plugin css-loader html-webpack-plugin mini-css-extract-plugin nodemon ts-loader ts-node typescript webpack webpack-cli webpack-dev-server webpack-html-plugin webpack-node-externals
  ```
- Create 3 webpack files: `webpack.common.js`, `webpack.dev.js`, `webpack.prod.js`  

  - `webpack.common.js`
    ```js
    const path = require('path');
    const HtmlWebpackPlugin = require('html-webpack-plugin');
    const {CleanWebpackPlugin} = require("clean-webpack-plugin");
    const MiniCssExtractPlugin = require('mini-css-extract-plugin');

    module.exports = {
      entry: path.resolve(__dirname, './src/index.ts'),
      module: {
        rules: [
          {
            test: /\.tsx?$/,
            use: 'ts-loader',
            exclude: /node_modules/,
          },
          {
            test: /\.css$/i,
            use: [
              MiniCssExtractPlugin.loader,
              'css-loader'
            ],
          },
        ],
      },
      resolve: {
        extensions: ['.tsx', '.ts', '.js'],
      },
      output: {
        filename: 'bundle.[hash].js',
        path: path.resolve(__dirname, 'dist'),
      },
      plugins: [
        new CleanWebpackPlugin(),
        new HtmlWebpackPlugin({
          template: path.resolve(__dirname, "./src/templates/index.html")
        }),
        new MiniCssExtractPlugin({filename: "styles.[hash].css"})
      ]
    };
    ```
  - `webpack.dev.js`
    ```js
    const webpackCommon = require('./webpack.common');
    const path = require('path');

    module.exports = {
      ...webpackCommon,
      devtool: "inline-source-map",
      mode: "development",
      devServer: {
        contentBase: path.join(__dirname, 'dist'),
        port: 3000
      }
    };
    ```
  - `webpack.prod.js` 
    ```js
    const webpackCommon = require('./webpack.common');

    module.exports = {
      ...webpackCommon,
      mode: "production",
    };
    ```

- Create `src/templates/index.html`
  ```html
  <!doctype html>
  <html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport"
            content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
      <meta http-equiv="X-UA-Compatible" content="ie=edge">
      <title>Webpack❤️TS</title>
  </head>
  <body>
    <h1>Hello TS + Webpack</h1>
  </body>
  </html>
  ```

- Create `src/index.ts`
  ```ts
  import "./styles.css";

  window.addEventListener("load", () => {
    const header = document.createElement("h1");
    header.innerText = "Webpack❤️TS"

    const body = document.querySelector("body");
    body.appendChild(header);

  })
  ```

- Create `src/styles.css`
  ```css
  h2 {
    color: #1976d2;
  }
  ```

- Update the `package.json` scripts
  ```json
  "scripts": {
    "start": "webpack-dev-server --config webpack.dev.js",
    "build": "webpack --config webpack.prod.js"
  }
  ```





